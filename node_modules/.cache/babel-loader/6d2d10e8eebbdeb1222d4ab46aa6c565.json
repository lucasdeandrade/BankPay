{"ast":null,"code":"var _jsxFileName = \"/home/note/bankpayapp/src/templates/SnackGame/SnackGame.tsx\";\nimport * as React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class SnakeGame extends React.Component {\n  render() {\n    let canvas;\n    let ctx;\n    let defaultTamanhoCauda = 3;\n    let tamanhoCauda = defaultTamanhoCauda;\n    let caminhoCobra = [];\n    let cobraEixoX = 10;\n    let cobraEixoY = cobraEixoX;\n    let tamanhoTela = 20;\n    let tamanhoCaminho = tamanhoTela;\n    let nextX = 0;\n    let nextY = nextX;\n\n    window.onload = function () {\n      canvas = document.getElementById(\"canvas\");\n      ctx = canvas.getContext(\"2d\");\n      document.addEventListener(\"keydown\", keyDownEvent);\n      let x = 8;\n      setInterval(desenharJogo, 1000 / x);\n    };\n\n    function keyDownEvent(event) {\n      // nextX e nextY representam as direções que a cobra irá percorrer\n      // nos eixos X e Y, respectivamente\n      switch (event.keyCode) {\n        case 37:\n          nextX = -1;\n          nextY = 0;\n          break;\n\n        case 38:\n          nextX = 0;\n          nextY = -1;\n          break;\n\n        case 39:\n          nextX = 1;\n          nextY = 0;\n          break;\n\n        case 40:\n          nextX = 0;\n          nextY = 1;\n          break;\n      }\n    } //Criação da comida\n\n\n    let appleY = 15;\n    let appleX = appleY;\n\n    function desenharJogo() {\n      cobraEixoX += nextX;\n      cobraEixoY += nextY;\n\n      if (cobraEixoX < 0) {\n        cobraEixoX = tamanhoTela - 1;\n      }\n\n      if (cobraEixoX > tamanhoTela - 1) {\n        cobraEixoX = 0;\n      }\n\n      if (cobraEixoY < 0) {\n        cobraEixoY = tamanhoTela - 1;\n      }\n\n      if (cobraEixoY > tamanhoTela - 1) {\n        cobraEixoY = 0;\n      }\n    } //Se a cobra comer o alimento\n\n\n    if (cobraEixoX == appleX && cobraEixoY == appleY) {\n      tamanhoCauda++;\n      appleX = Math.floor(Math.random() * tamanhoTela);\n      appleY = Math.floor(Math.random() * tamanhoTela);\n    }\n\n    ctx.fillStyle = \"green\";\n\n    for (let i = 0; i < caminhoCobra.length; i++) {\n      ctx.fillRect(caminhoCobra[i].x * tamanhoCaminho, caminhoCobra[i].y * tamanhoCaminho, tamanhoCaminho, tamanhoCaminho);\n\n      if (caminhoCobra[i].x == cobraEixoX && caminhoCobra[i].y == cobraEixoY) {\n        tamanhoCauda = defaultTamanhoCauda;\n      }\n    }\n\n    ctx.fillStyle = \"red\";\n    ctx.fillRect(appleX * tamanhoCaminho, appleY * tamanhoCaminho, tamanhoCaminho, tamanhoCaminho);\n    caminhoCobra.push({\n      x: cobraEixoX,\n      y: cobraEixoY\n    });\n\n    while (caminhoCobra.length > tamanhoCauda) {\n      caminhoCobra.shift();\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n        id: \"canvas\",\n        width: \"400\",\n        height: \"400\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"names":["React","SnakeGame","Component","render","canvas","ctx","defaultTamanhoCauda","tamanhoCauda","caminhoCobra","cobraEixoX","cobraEixoY","tamanhoTela","tamanhoCaminho","nextX","nextY","window","onload","document","getElementById","getContext","addEventListener","keyDownEvent","x","setInterval","desenharJogo","event","keyCode","appleY","appleX","Math","floor","random","fillStyle","i","length","fillRect","y","push","shift"],"sources":["/home/note/bankpayapp/src/templates/SnackGame/SnackGame.tsx"],"sourcesContent":["import * as React from 'react';\n\nexport interface ISnakeGameProps {\n}\n\nexport default class SnakeGame extends React.Component<ISnakeGameProps> {\n\n  public render() {\n\n    let canvas: any;\n    let ctx: any;\n\n    let defaultTamanhoCauda = 3;\n    let tamanhoCauda = defaultTamanhoCauda;\n    let caminhoCobra: { y: any; x: any}[] = [];\n    let cobraEixoX = 10;\n    let cobraEixoY = cobraEixoX;\n\n    let tamanhoTela = 20;\n    let tamanhoCaminho = tamanhoTela\n    let nextX = 0;\n    let nextY = nextX;\n    \n    window.onload = function(){\n        canvas = document.getElementById(\"canvas\");\n        ctx = canvas.getContext(\"2d\");\n        document.addEventListener(\"keydown\", keyDownEvent);\n        let x = 8;\n        setInterval(desenharJogo, 1000 / x);\n    };\n\n    function keyDownEvent(event: any){\n        // nextX e nextY representam as direções que a cobra irá percorrer\n        // nos eixos X e Y, respectivamente\n        switch(event.keyCode){\n            case 37:\n                nextX = -1;\n                nextY = 0;\n                break;\n            case 38:\n                nextX = 0;\n                nextY = -1;\n                break;\n            case 39:\n                nextX = 1;\n                nextY = 0;\n                break;\n            case 40:\n                nextX = 0;\n                nextY = 1;\n                break;\n        }\n    }\n\n    \n\n    //Criação da comida\n    let appleY = 15\n    let appleX = appleY;\n\n    function desenharJogo(){\n        cobraEixoX += nextX;\n        cobraEixoY += nextY;\n    \n        if (cobraEixoX < 0){\n            cobraEixoX = tamanhoTela -1;\n        }\n        \n        if (cobraEixoX > tamanhoTela - 1){\n            cobraEixoX = 0;\n        }\n        \n        if (cobraEixoY < 0){\n            cobraEixoY = tamanhoTela -1;\n        }\n        \n        if (cobraEixoY > tamanhoTela - 1){\n            cobraEixoY = 0;\n        }\n    \n    }\n\n    //Se a cobra comer o alimento\n    if (cobraEixoX == appleX && cobraEixoY == appleY){\n        tamanhoCauda++;\n        appleX = Math.floor(Math.random() * tamanhoTela);\n        appleY = Math.floor(Math.random() * tamanhoTela);\n    }\n\n\n    ctx.fillStyle = \"green\";\n    for (let i = 0; i < caminhoCobra.length; i++){\n        ctx.fillRect(\n            caminhoCobra[i].x * tamanhoCaminho,\n            caminhoCobra[i].y * tamanhoCaminho,\n            tamanhoCaminho,\n            tamanhoCaminho\n        );\n        if (caminhoCobra[i].x == cobraEixoX && caminhoCobra[i].y == cobraEixoY){\n            tamanhoCauda = defaultTamanhoCauda;\n        }\n    }\n\n    ctx.fillStyle = \"red\";\n    ctx.fillRect(appleX * tamanhoCaminho, appleY * tamanhoCaminho, tamanhoCaminho, tamanhoCaminho);\n\n    caminhoCobra.push({\n        x:cobraEixoX,\n        y:cobraEixoY\n    });\n    while (caminhoCobra.length > tamanhoCauda){\n        caminhoCobra.shift(); }\n\n    return (\n      <div>\n        <canvas id=\"canvas\" width=\"400\" height=\"400\"></canvas>\n      </div>\n    );\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}